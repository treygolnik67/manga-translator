# app.py ‚Äî –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –º–∞–Ω–≥–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Render)

import streamlit as st
from PIL import Image
import fitz  # PyMuPDF
import zipfile
import tempfile
from pathlib import Path
import easyocr
from g4f.client import Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
TEMP_DIR = Path(tempfile.mkdtemp())
reader = easyocr.Reader(['ja'])  # –¢–æ–ª—å–∫–æ —è–ø–æ–Ω—Å–∫–∏–π ‚Äî –±—ã—Å—Ç—Ä–µ–µ –∏ –ª–µ–≥—á–µ

# --- –§—É–Ω–∫—Ü–∏—è: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
def convert_to_images(uploaded_file):
    file_ext = uploaded_file.name.lower().split('.')[-1]
    image_list = []
    temp_path = TEMP_DIR / uploaded_file.name

    with open(temp_path, "wb") as f:
        f.write(uploaded_file.getvalue())

    try:
        if file_ext in ["png", "jpg", "jpeg"]:
            image_list.append(Image.open(temp_path))
        elif file_ext == "pdf":
            st.info("üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            pdf_document = fitz.open(temp_path)
            for page_num in range(len(pdf_document)):
                page = pdf_document.load_page(page_num)
                pix = page.get_pixmap(dpi=120)  # –£–º–µ–Ω—å—à–∞–µ–º DPI –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
                image_list.append(img)
            pdf_document.close()
        elif file_ext == "cbz":
            st.info("üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é CBZ...")
            with zipfile.ZipFile(temp_path, 'r') as cbz:
                for file in sorted(cbz.namelist()):
                    if file.lower().endswith((".png", ".jpg", ".jpeg")):
                        with cbz.open(file) as img_file:
                            img = Image.open(img_file)
                            image_list.append(img)
        else:
            st.error(f"‚ùå –§–æ—Ä–º–∞—Ç .{file_ext} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return None
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        return None
    return image_list

# --- –§—É–Ω–∫—Ü–∏—è: –ø–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π ---
def translate_en_to_ru(text):
    client = Client()
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π: {text}"}]
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}"

# --- –§—É–Ω–∫—Ü–∏—è: OCR + –ø–µ—Ä–µ–≤–æ–¥ ---
def ocr_and_translate(image):
    # –£–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    max_width = 800
    if image.width > max_width:
        ratio = max_width / image.width
        new_size = (int(image.width * ratio), int(image.height * ratio))
        img_resized = image.resize(new_size, Image.Resampling.LANCZOS)
    else:
        img_resized = image

    results = reader.readtext(img_resized)
    jp_text = " ".join([res[1] for res in results if res[2] > 0.1])
    
    if not jp_text.strip():
        return "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

    # –Ø–ø–æ–Ω—Å–∫–∏–π ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
    client = Client()
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {jp_text}"}]
        )
        en_text = response.choices[0].message.content
    except Exception:
        en_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"

    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π
    ru_text = translate_en_to_ru(en_text)

    return jp_text, en_text, ru_text

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.set_page_config(page_title="MangaTranslator", layout="centered")

st.title("üåê MangaTranslator")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≥–ª–∞–≤—É ‚Äî –º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º –∏ –ø–µ—Ä–µ–≤–µ–¥—ë–º —Ç–µ–∫—Å—Ç!")

uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≥–ª–∞–≤—É (PDF, CBZ, JPG, PNG)",
    type=["pdf", "cbz", "png", "jpg", "jpeg"]
)

if uploaded_file:
    with st.spinner("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Ñ–∞–π–ª..."):
        images = convert_to_images(uploaded_file)

    if images:
        st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(images)} —Å—Ç—Ä–∞–Ω–∏—Ü")

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º slider –ø—Ä–∏ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if len(images) == 1:
            st.write("üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: 1")
            page = 1
        else:
            page = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", 1, len(images), 1)

        img = images[page - 1]
        st.image(img, caption=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}", use_container_width=True)

        if st.button("üîç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏"):
            with st.spinner("üß† –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º..."):
                jp, en, ru = ocr_and_translate(img)

            st.subheader("üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç:")
            st.write(jp)
            st.subheader("üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:")
            st.write(en)
            st.subheader("üá∑üá∫ –†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:")
            st.write(ru)
